// Generated by BUCKLESCRIPT VERSION 4.0.3, PLEASE EDIT WITH CARE
'use strict';

var Curry = require("bs-platform/lib/js/curry.js");
var React = require("react");
var Js_exn = require("bs-platform/lib/js/js_exn.js");
var Js_dict = require("bs-platform/lib/js/js_dict.js");
var Js_json = require("bs-platform/lib/js/js_json.js");
var ReasonReact = require("reason-react/src/ReasonReact.js");
var Js_primitive = require("bs-platform/lib/js/js_primitive.js");
var ReasonApollo = require("reason-apollo/src/ReasonApollo.bs.js");

var ppx_printed_query = "query   {\nform  {\ninput  \n}\n\n}\n";

function parse(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["form"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeObject(match$1);
      if (match$2 !== undefined) {
        var match$3 = Js_primitive.valFromOption(match$2)["input"];
        var tmp$1;
        if (match$3 !== undefined) {
          var match$4 = Js_json.decodeString(match$3);
          tmp$1 = match$4 !== undefined ? match$4 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$3));
        } else {
          tmp$1 = Js_exn.raiseError("graphql_ppx: Field input on type Form is missing");
        }
        tmp = {
          input: tmp$1
        };
      } else {
        tmp = Js_exn.raiseError("graphql_ppx: Object is not a value");
      }
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field form on type Query is missing");
    }
    return {
            form: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function makeWithVariables() {
  return {
          query: ppx_printed_query,
          variables: null,
          parse: parse
        };
}

function ret_type() {
  return /* module */[];
}

var MT_Ret = /* module */[];

var GetDefaultInput = /* module */[
  /* ppx_printed_query */ppx_printed_query,
  /* query */ppx_printed_query,
  /* parse */parse,
  /* make */make,
  /* makeWithVariables */makeWithVariables,
  /* ret_type */ret_type,
  /* MT_Ret */MT_Ret
];

var GetDefaultInputQuery = ReasonApollo.CreateQuery([
      ppx_printed_query,
      parse
    ]);

var ppx_printed_query$1 = "mutation UpdateForm($content: String!)  {\nupdateForm(content: $content)  \n}\n";

function parse$1(value) {
  var match = Js_json.decodeObject(value);
  if (match !== undefined) {
    var match$1 = Js_primitive.valFromOption(match)["updateForm"];
    var tmp;
    if (match$1 !== undefined) {
      var match$2 = Js_json.decodeString(match$1);
      tmp = match$2 !== undefined ? match$2 : Js_exn.raiseError("graphql_ppx: Expected string, got " + JSON.stringify(match$1));
    } else {
      tmp = Js_exn.raiseError("graphql_ppx: Field updateForm on type Mutation is missing");
    }
    return {
            updateForm: tmp
          };
  } else {
    return Js_exn.raiseError("graphql_ppx: Object is not a value");
  }
}

function make$1(content, _) {
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "content",
                  content
                ]]),
          parse: parse$1
        };
}

function makeWithVariables$1(variables) {
  var content = variables.content;
  return {
          query: ppx_printed_query$1,
          variables: Js_dict.fromArray(/* array */[/* tuple */[
                  "content",
                  content
                ]]),
          parse: parse$1
        };
}

function ret_type$1() {
  return /* module */[];
}

var MT_Ret$1 = /* module */[];

var UpdateInput = /* module */[
  /* ppx_printed_query */ppx_printed_query$1,
  /* query */ppx_printed_query$1,
  /* parse */parse$1,
  /* make */make$1,
  /* makeWithVariables */makeWithVariables$1,
  /* ret_type */ret_type$1,
  /* MT_Ret */MT_Ret$1
];

var UpdateInputMutation = ReasonApollo.CreateMutation([
      ppx_printed_query$1,
      parse$1
    ]);

function updateEvent(e) {
  return make$1(e.currentTarget.value, /* () */0);
}

var component = ReasonReact.statelessComponent("Input");

function make$2() {
  return /* record */[
          /* debugName */component[/* debugName */0],
          /* reactClassInternal */component[/* reactClassInternal */1],
          /* handedOffState */component[/* handedOffState */2],
          /* willReceiveProps */component[/* willReceiveProps */3],
          /* didMount */component[/* didMount */4],
          /* didUpdate */component[/* didUpdate */5],
          /* willUnmount */component[/* willUnmount */6],
          /* willUpdate */component[/* willUpdate */7],
          /* shouldUpdate */component[/* shouldUpdate */8],
          /* render */(function () {
              return ReasonReact.element(undefined, undefined, Curry.app(GetDefaultInputQuery[/* make */3], [
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              undefined,
                              (function (param) {
                                  var result = param[/* result */0];
                                  if (typeof result === "number") {
                                    return React.createElement("div", undefined, "LOADING");
                                  } else if (result.tag) {
                                    var response = result[0];
                                    return ReasonReact.element(undefined, undefined, Curry._4(UpdateInputMutation[/* make */4], undefined, undefined, undefined, (function (mutation, param) {
                                                      var result = param[/* result */0];
                                                      var tmp;
                                                      tmp = typeof result === "number" || result.tag !== 1 ? null : React.createElement("div", undefined, result[0].updateForm);
                                                      return React.createElement("div", undefined, React.createElement("input", {
                                                                      defaultValue: response.form.input,
                                                                      onBlur: (function (e) {
                                                                          Curry._3(mutation, Js_primitive.some(updateEvent(e).variables), undefined, /* () */0);
                                                                          return /* () */0;
                                                                        })
                                                                    }), tmp);
                                                    })));
                                  } else {
                                    return React.createElement("div", undefined, result[0].message);
                                  }
                                })
                            ]));
            }),
          /* initialState */component[/* initialState */10],
          /* retainedProps */component[/* retainedProps */11],
          /* reducer */component[/* reducer */12],
          /* jsElementWrapped */component[/* jsElementWrapped */13]
        ];
}

exports.GetDefaultInput = GetDefaultInput;
exports.GetDefaultInputQuery = GetDefaultInputQuery;
exports.UpdateInput = UpdateInput;
exports.UpdateInputMutation = UpdateInputMutation;
exports.updateEvent = updateEvent;
exports.component = component;
exports.make = make$2;
/* GetDefaultInputQuery Not a pure module */
